{# Transformers for different entry types in the collections component
   These macros handle the conversion of raw data into a consistent format
   expected by the entry component. Each returns a tuple of values in the order:
   (cover, title, lede, url, more) #}

{# Base transformer that handles common functionality
   Args:
     cover: The cover image URL
     title: The entry title
     lede: The entry description
     url: The entry URL
     more: The "read more" text
   Returns:
     Tuple of (cover, title, lede, url, more) for the entry component #}
{% macro transformBase(cover, title, lede, url, more) %}
  {{ cover, title, lede, url, more }}
{% endmacro %}

{# Transforms a blog post into the entry format
   Args:
     post: The post object containing data from the collections
   Returns:
     Tuple of (cover, title, lede, url, more) for the entry component #}
{% macro transformPost(post) %}
  {% set entryCover = post.data.cover %}
  {% set entryTitle = post.data.title %}
  {% set entryLede = post.data.lede %}
  {% set entryUrl = post.url %}
  {% set entryMore = 'Read article' %}
  
  {{ transformBase(entryCover, entryTitle, entryLede, entryUrl, entryMore) }}
{% endmacro %}

{# Transforms a portfolio item into the entry format
   Args:
     item: The portfolio item object containing project data
   Returns:
     Tuple of (cover, title, lede, url, more) for the entry component
   Note:
     Handles special case for 'Collective [i]' project name
     Applies Cloudinary image transformation for covers #}
{% macro transformPortfolioItem(item) %}
  {% set cover = 'https://res.cloudinary.com/keenan-payne/image/upload/f_auto,q_auto,w_1000/' ~ item.cover %}
  {% set name = item.name %}
  {% set lede = item.lede %}
  {% set more = 'View case study' %}

  {# Special case due to square brackets #}
  {% if item.name == 'Collective [i]' %}
    {% set url = '/portfolio/collective-intelligence' %}
  {% else %}
    {% set url = '/portfolio/' ~ item.name | lower | replace(' ', '-') | replace('.', '') %}
  {% endif %}

  {{ transformBase(cover, name, lede, url, more) }}
{% endmacro %}

{# Transforms a service into the entry format
   Args:
     service: The service object containing service data
   Returns:
     Tuple of (cover, title, lede, url, more) for the entry component
   Note:
     Handles optional cover image with fallback to empty string #}
{% macro transformService(service) %}
  {% set entryTitle = service.data.title %}
  {% set entryLede = service.data.lede %}
  {% set entryUrl = service.url %}
  {% set entryCover = service.data.cover if service.data.cover else '' %}
  {% set entryMore = 'Learn more' %}

  {{ transformBase(entryCover, entryTitle, entryLede, entryUrl, entryMore) }}
{% endmacro %}