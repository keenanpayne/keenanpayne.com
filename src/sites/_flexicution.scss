//
// Flexicution
// ==================================================

//
// Typography
// ----------

:root {
  font-family: 'Overpass', sans-serif;
  font-weight: 300;
  letter-spacing: -.65px;
  word-spacing: .25px;
}

h1, h2, h3, h4 {
  font-family: 'Permanent Marker', cursive;
  letter-spacing: 0;

  + p { margin-top: $spacing-xs; }
}

pre, code { background-color: transparent; }


//
// Project Header
// --------------

.flexHead {
  background-color: getColor(flexicution, header);
  margin-top: 0;
  padding-bottom: $spacing-l;
  padding-top: $spacing-l;
  text-align: center;

  @media (--small) {
    padding-bottom: $spacing-xl;
    padding-top: $spacing-xl;
  }
}

.flexHead-title {
  color: white;
  font-size: typeScale(9);
  margin-top: 0;

  @media (--small) {
    font-size: typeScale(10);
  }

  @media (--medium) {
    font-size: typeScale(12);
  }
}

.flexHead-subtitle {
  color: white;
  font-size: typeScale(2);
  font-weight: 300;
  margin-top: $spacing-xs;
  margin-left: auto;
  margin-right: auto;
  max-width: 80%;

  @media (--small) {
    font-size: typeScale(3);
    max-width: 550px;
  }

  a {
    &,
    &:hover { color: white; }
  }
}

.flexHead-nav { margin-top: $spacing-m; }

.flexHead-nav-item {
  border: 2px solid white;
  color: white;
  font-size: typeScale(2);
  font-weight: 600;
  padding: $spacing-xxs $spacing-s;
  transition: background-color $transition-duration;

  &:not(:last-of-type) { margin-right: $spacing-xxs; }

  &:hover { background-color: white; }

  @media (--small) {
    font-size: typeScale(3);
  }
}


//
// Instructions
// ------------

.instructions {
  background-color: getColor(background, light);
  border-bottom: 1px solid getColor(flexicution, border);
  margin-bottom: $spacing-m;
  margin-top: 0;
}

.instructions-header:first-of-type {
  margin-bottom: $spacing-xs;
  margin-top: 0;
  padding-top: $spacing-m;
}


//
// Demos
// -----

.demo { margin-top: $spacing-s; }

.demo-format + .demo { margin-top: $spacing-xs; }

.demo-format {
  font-weight: 600;
  margin-bottom: 1rem;
}


//
// Footer
// ------

.flexFooter {
  background-color: getColor(background, light);
  border-top: 1px solid getColor(flexicution, border);
  font-size: .75rem;
  margin-top: $spacing-m;
  padding-bottom: $spacing-s;
  padding-top: $spacing-s;
  text-align: center;

  p { margin-bottom: 0; }
}




//
// Flexicution Library
// -------------------

//
// Variables
// =============================================================================

// Breakpoints
$media-xsmall-min:   480px;
$media-small-min:    768px;
$media-medium-min:   960px;
$media-large-min:   1120px;
$media-xlarge-min:  1280px;

// Grid settings
$grid-columns: 12;
$grid-gutter-width: 32px;




//
// Mixins
// =============================================================================
// Generate semantic grid columns with these mixins.

//
// make-row()
// ----------
// Creates a wrapper for a series of columns

@mixin make-row($gutter: $grid-gutter-width) {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-left:  ceil($gutter / -2);
  margin-right: floor($gutter / -2);

  &.-reverse { flex-direction: row-reverse; }
}


//
// make-column()
// -------------
// Generates semantic columns for a given width and viewport size

@mixin make-column($columns, $gutter: $grid-gutter-width, $media-query: null, $min-max: null) {
  $column-width: percentage($columns / $grid-columns);
  $media-min-max: 'min';

  @if ($gutter == null) {
    $gutter: $grid-gutter-width;
  }

  @if ($min-max != null) {
    $media-min-max: $min-max;
  }

  box-sizing: border-box;
  flex: 0 0 auto;
  padding-left:  ($gutter / 2);
  padding-right: ($gutter / 2);
  position: relative;

  @if ($media-query != null) {
    @media (#{$media-min-max}-width: $media-query) {
      flex-basis: $column-width;
      max-width: $column-width;
    }
  } @else {
    flex-basis: $column-width;
    max-width: $column-width;
  }
}


//
// make-column-offset()
// --------------------

@mixin make-column-offset($columns, $media-query: null, $min-max: null) {
  $column-offset: percentage($columns / $grid-columns);
  $media-min-max: 'min';

  @if ($min-max != null) {
    $media-min-max: $min-max;
  }

  @if ($media-query != null) {
    @media (#{$media-min-max}-width: $media-query) {
      margin-left: $column-offset;
    }
  } @else {
    margin-left: $column-offset;
  }
}




//
// Grid Generation Mixins
// =============================================================================

//
// calc-grid-column()
// ------------------
// Helper mixin used by `loop-grid-columns()` to generate semantic column classes

@mixin calc-grid-column($index, $class, $type) {
  @if ($type == width) and ($index > 0) {
    .col-#{$class}-#{$index} {
      flex-basis: percentage($index / $grid-columns);
      max-width: percentage($index / $grid-columns);
    }
  }

  @if ($type == offset) {
    .col-#{$class}-offset-#{$index} {
      margin-left: percentage($index / $grid-columns);
    }
  }
}


//
// loop-grid-columns()
// -------------------
// Helper mixin used by `make-grid()` to loop over the `calc-grid-column()` mixin

@mixin loop-grid-columns($columns, $class, $type) {
  @for $i from 0 through $columns {
    @include calc-grid-column($i, $class, $type);
  }
}


//
// make-grid()
// -----------
// Generate grid classes and modifiers

@mixin make-grid($class) {
  @include loop-grid-columns($grid-columns, $class, width);
  @include loop-grid-columns($grid-columns, $class, offset);

  // Adaptive column sizing
  .col-#{$class} {
    flex-basis: 0;
    flex-grow: 1;
    max-width: 100%;
  }

  // Breakpoint-specific column modifiers
  .-#{$class}-first { order: -1; }

  .-#{$class}-last { order: 1; }

  .-#{$class}-start {
    justify-content: flex-start;
    text-align: start;
  }

  .-#{$class}-center {
    justify-content: center;
    text-align: center;
  }

  .-#{$class}-end {
    justify-content: flex-end;
    text-align: end;
  }

  .-#{$class}-top { align-items: flex-start; }

  .-#{$class}-middle { align-items: center; }

  .-#{$class}-bottom { align-items: flex-end; }

  .-#{$class}-space-around { justify-content: space-around; }

  .-#{$class}-space-between { justify-content: space-between; }
}




//
// Styles
// =============================================================================

.container {
  box-sizing: border-box;
  margin-left: auto;
  margin-right: auto;
  width: 90%;

  @media (min-width: $media-xlarge-min) {
    width: 1220px;
  }
}

.row { @include make-row; }

[class*="col-"] {
  box-sizing: border-box;
  flex: 0 0 auto;
  padding-left:  ($grid-gutter-width / 2);
  padding-right: ($grid-gutter-width / 2);
  position: relative;
}


//
// Generate Classes
// ----------------

// Extra-small
@include make-grid(xsmall);

// Small
@media (min-width: $media-small-min) {
  @include make-grid(small);
}

// Medium
@media (min-width: $media-medium-min) {
  @include make-grid(medium);
}

// Large
@media (min-width: $media-large-min) {
  @include make-grid(large);
}

// Extra-large
@media (min-width: $media-xlarge-min) {
  @include make-grid(xlarge);
}




//
// Demo-Specific Styles
// =============================================================================

.box {
  background-color: #EDF1F2;
  border: 1px solid #9CA6AF;
  font-size: .875rem;
  margin-bottom: $spacing-xs;
  overflow: hidden;
  padding: $spacing-xs;
  text-align: center;

  .box { margin-bottom: 0; }
}
