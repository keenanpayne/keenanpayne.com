{"version":3,"file":"app.js","sources":["../../src/_assets/js/app.js","../../src/_assets/js/modules/mobileNavigation.js","../../src/_assets/js/modules/lazyLoading.js"],"sourcesContent":["import lazyLoading from './modules/lazyLoading';\nimport mobileNavigation from './modules/mobileNavigation';\n\n\n// Initialize\nwindow.addEventListener('load', () => {\n  mobileNavigation();\n  lazyLoading();\n});\n","export default () => {\n  const active = '-active';\n  const hamburger = document.querySelector('.hamburger');\n\n  hamburger.addEventListener('click', function(event) {\n    const isMobile = window.matchMedia('(max-width: 768px)').matches\n\n    if (isMobile) {\n      event.preventDefault();\n\n      hamburger.classList.toggle(active);\n\n      document.documentElement.classList.toggle('-no-scroll');\n      document.querySelector('.navigation').classList.toggle(active);\n    }\n  });\n};\n","export default () => {\n  const lazyImages = [].slice.call(document.querySelectorAll(\"img.lazy\"));\n  const lazyVideos = [].slice.call(document.querySelectorAll(\"video.lazy\"));\n  const lazyIFrames = [].slice.call(document.querySelectorAll(\"iframe.lazy\"));\n\n  const IntersectionObserverOptions = {\n    rootMargin: \"500px\" // Trigger 500px ahead\n  };\n\n  if (\"IntersectionObserver\" in window) {\n    const lazyMediaObserver = new IntersectionObserver(function(entries, observer) {\n      entries.forEach(function(entry) {\n        if (entry.isIntersecting) {\n          const lazyMedia = entry.target;\n\n          // Check if the element is a video or an image\n          if (entry.target.localName == 'video') {\n            const source = Array.from(entry.target.children).filter(x => x.localName === \"source\")[0]\n            source.src = source.dataset.src;\n            lazyMedia.load();\n            lazyMedia.play();\n          } else {\n            lazyMedia.src = lazyMedia.dataset.src;\n            // TODO: Uncomment when adding srcsets\n            // lazyMedia.srcset = lazyMedia.dataset.srcset;\n          }\n\n          lazyMedia.classList.remove(\"lazy\");\n          lazyMediaObserver.unobserve(lazyMedia);\n        }\n      });\n    }, IntersectionObserverOptions);\n\n    lazyImages.forEach(function(lazyImage) {\n      lazyMediaObserver.observe(lazyImage);\n    });\n\n    // lazyVideos.forEach(function(lazyVideo){\n    //   lazyMediaObserver.observe(lazyVideo);\n    // });\n\n    // lazyIFrames.forEach(function(lazyIFrame){\n    //   lazyMediaObserver.observe(lazyIFrame);\n    // });\n  }\n};\n"],"names":["window","addEventListener","active","hamburger","document","querySelector","event","matchMedia","matches","preventDefault","classList","toggle","documentElement","lazyImages","slice","call","querySelectorAll","lazyMediaObserver","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","lazyMedia","target","localName","source","Array","from","children","filter","x","src","dataset","load","play","remove","unobserve","rootMargin","lazyImage","observe","lazyLoading"],"mappings":"AAKAA,OAAOC,iBAAiB,OAAQ,eCJxBC,EACAC,EADAD,EAAS,WACTC,EAAYC,SAASC,cAAc,eAE/BJ,iBAAiB,QAAS,SAASK,GAC1BN,OAAOO,WAAW,sBAAsBC,UAGvDF,EAAMG,iBAENN,EAAUO,UAAUC,OAAOT,GAE3BE,SAASQ,gBAAgBF,UAAUC,OAAO,cAC1CP,SAASC,cAAc,eAAeK,UAAUC,OAAOT,iBCZ3D,IAAMW,EAAa,GAAGC,MAAMC,KAAKX,SAASY,iBAAiB,aAQ3D,GAPmB,GAAGF,MAAMC,KAAKX,SAASY,iBAAiB,eACvC,GAAGF,MAAMC,KAAKX,SAASY,iBAAiB,gBAMxD,yBAA0BhB,OAAQ,CACpC,IAAMiB,EAAoB,IAAIC,qBAAqB,SAASC,EAASC,GACnED,EAAQE,QAAQ,SAASC,GACvB,GAAIA,EAAMC,eAAgB,CACxB,IAAMC,EAAYF,EAAMG,OAGxB,GAA8B,SAA1BH,EAAMG,OAAOC,UAAsB,CACrC,IAAMC,EAASC,MAAMC,KAAKP,EAAMG,OAAOK,UAAUC,OAAO,SAAAC,SAAqB,WAAhBA,EAAEN,YAAwB,GACvFC,EAAOM,IAAMN,EAAOO,QAAQD,IAC5BT,EAAUW,OACVX,EAAUY,YAEVZ,EAAUS,IAAMT,EAAUU,QAAQD,IAKpCT,EAAUd,UAAU2B,OAAO,QAC3BpB,EAAkBqB,UAAUd,OAvBA,CAClCe,WAAY,UA2BZ1B,EAAWQ,QAAQ,SAASmB,GAC1BvB,EAAkBwB,QAAQD,MF3B9BE"}